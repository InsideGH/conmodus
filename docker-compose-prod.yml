version: '3.7'
services:

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX-}_frontend:prod
    networks:
      - net_a
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      API_ENDPOINT: http://api-gateway/api
      API_ENDPOINT_CLIENT: /api-gateway/api
      GRAPHQL_ENDPOINT: http://api-gateway/graphql
      GRAPHQL_ENDPOINT_CLIENT: /api-gateway/graphql
      CONMODUS_TIMEOUT: 1000
      CONMODUS_MAX_RENDERS: 10
      CONMODUS_REACT_ROOT: react-root
      CONMODUS_MODE: ssr
      VERSION: ${VERSION-}
    command: npm run prod

  cms:
    build:
      context: ./services/cms
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX-}_cms:prod
    networks:
      - net_a
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      API_ENDPOINT_CLIENT: /api-gateway/api
      GRAPHQL_ENDPOINT_CLIENT: /api-gateway/graphql
      VERSION: ${VERSION-}
    command: npm run prod

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX-}_api_gateway:prod
    networks:
      - net_a
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      GRAPHQL_ENDPOINT: /graphql
      API_ENDPOINT: /api
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: 1
      POSTGRES_USER: 1
      POSTGRES_DB: ${POSTGRES_DB-}
      VERSION: ${VERSION-}
    command: npm run prod

  postgres:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    networks:
      - net_a
    environment:
      POSTGRES_PASSWORD: 1
      POSTGRES_USER: 1
      POSTGRES_DB: ${POSTGRES_DB-}

  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX-}_nginx:local
    ports:
      - "${PORT_LOCAL}:80"
    networks:
      - net_a

networks:
  net_a:
